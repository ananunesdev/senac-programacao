from datetime import date

data_atual = date.today()
data_atual = '{}/{}/{}'.format(data_atual.day, data_atual.month, data_atual.year)

def infocarro():
    dono = input('Informe o nome do propriet√°rio do carro: ')
    chassi = input('Informe o chassi do ve√≠culo: [8 √∫ltimos algarismos] ')
    placa = input('Informe a placa do ve√≠culo: ')
    modelo = input('Informe o modelo do carro: ')
    kmI = float(input("Insira a quilometragem inicial: "))
    kmF = float(input("Insira a quilometragem final: "))
    kmA = float(input("Insira a quilometragem atual: "))

    carro = {
        'Propriet√°rio': dono,
        'Chassi': chassi,
        'Placa': placa,
        'Modelo': modelo,
        'Quilometragem inicial': kmI,
        'Quilometragem final': kmF,
        'Quilometragem atual': kmA
    }

    return carro

def abastecimento():
    print("---------------------------------------------")
    print("                  ABASTECIMENTO")
    print("---------------------------------------------")
    tipoc = 0
    while tipoc not in [1, 2, 3]:
        tipoc = int(input("Tipo de combust√≠vel: [ 1: √Ålcool | 2: Gasolina | 3: Diesel ] "))
        if tipoc == 1:
            print("O tipo de combust√≠vel √© √Ålcool")
        elif tipoc == 2:
            print("O tipo de combust√≠vel √© Gasolina")
        elif tipoc == 3:
            print("O tipo de combust√≠vel √© Diesel")
        else:
            print("Op√ß√£o inv√°lida! Tente novamente.")

    preco = float(input("Valor do combust√≠vel: "))
    litrosA = float(input("Litros Abastecidos: "))
    valorA = preco * litrosA
    print(f'Valor do abastecimento: R$ {valorA:.2f}')
    return litrosA, valorA

def calcular_media(km_rodados, litrosA):
    print("---------------------------------------------")
    print("                     M√âDIA")
    print("---------------------------------------------")
    if litrosA != 0:
        mediaV = km_rodados / litrosA
        print(f"M√©dia de KM por Litro: {mediaV:.2f}")
    else:
        mediaV = 0
        print("N√£o foi poss√≠vel calcular a m√©dia, litros abastecidos √© zero.")
    return mediaV

def resumo(carro, km_rodados, litrosA, valorA, mediaV):
    print("--------------------------------------------- ")
    print("                  RESUMO ")
    print("--------------------------------------------- ")
    print(f"Propriet√°rio: {carro['Propriet√°rio']}")
    print("--------------------------------------------- ")
    print(f"Placa: {carro['Placa']}")
    print(f"Chassi: {carro['Chassi']}")
    print(f"KM Inicial: {carro['Quilometragem inicial']}")
    print(f"KM Final: {carro['Quilometragem final']}")
    print(f"Total KM: {km_rodados}")
    print("--------------------------------------------- ")
    print(f"Tipo de combust√≠vel: {carro['Tipo de combust√≠vel']}")
    print(f"Valor do Abastecimento: R$ {valorA:.2f}")
    print(f"M√©dia de KM por Litro: {mediaV:.2f}")
    print("---------------------------------------------")
    print("                   RESULTADO")
    print("---------------------------------------------")
    if mediaV > 10:
        print("Status: Acima da m√©dia")
    elif 9 <= mediaV <= 10:
        print("Status: Dentro da m√©dia")
    elif mediaV < 9:
        print("Status: Abaixo da m√©dia")
    else:
        print("C√°lculo inv√°lido")

def exibir_todos_carros(carros):
    if not carros:
        print('N√£o h√° ve√≠culos registrados.')
    else:
        for i, carro in enumerate(carros, start=1):
            print(f"Carro {i}:")
            for chave, valor in carro.items():
                print(f"{chave}: {valor}")
            print('')

def calcular_consumo(carros):
    for carro in carros:
        km_rodados = carro['Quilometragem final'] - carro['Quilometragem inicial']
        if km_rodados != 0:
            consumo = km_rodados / (carro['Quilometragem atual'] - carro['Quilometragem inicial'])
            print(f"Carro de {carro['Propriet√°rio']}\n"
                  f" ({carro['Modelo']}):\n"
                  f" {consumo:.2f} km/l")
        else:
            print(f"Carro de {carro['Propriet√°rio']} ({carro['Modelo']}): N√£o foi poss√≠vel calcular o consumo devido √† quilometragem rodado ser zero.")

def troca_pecas(km_rodados):
    print("---------------------------------------------")
    print("                TROCA DE PE√áAS")
    print("---------------------------------------------")
    if km_rodados < 5000:
        troca = "Parab√©ns! Seu ve√≠culo est√° em √≥timo estado. N√£o h√° necessidade de trocar pe√ßas no momento."
    elif 5000 <= km_rodados <= 10000:
        troca = ("SUGEST√ÉO DE TROCA\n"
                 "========================\n"
                 "üîß √ìleo do Motor: Para garantir um desempenho suave e evitar desgastes.\n"
                 "üîß Pneus: Verifique o estado e considere a substitui√ß√£o para seguran√ßa.\n")
    elif 10000 < km_rodados <= 15000:
        troca = ("SUGEST√ÉO DE TROCA\n"
                 "========================\n"
                 "üîß √ìleo do Motor: Troque o √≥leo para manter o motor funcionando perfeitamente.\n")
    elif 15000 < km_rodados <= 29999:
        troca = "Seu ve√≠culo est√° funcionando bem. N√£o h√° necessidade de troca de pe√ßas significativas neste momento."
    elif 30000 <= km_rodados <= 40000:
        troca = ("SUGEST√ÉO DE TROCA\n"
                 "========================\n"
                 "üîß Cabo de Vela: Troque para garantir uma igni√ß√£o eficiente e economia de combust√≠vel.\n")
    elif 40000 < km_rodados <= 50000:
        troca = ("SUGEST√ÉO DE TROCA\n"
                 "========================\n"
                 "üîß Correia Dentada: Substitua para evitar danos graves ao motor.\n")

    print(troca)

def main():
    carros = []

    while True:
        print("======================")
        print('‚ú§ GM CONSULT LTDA ‚ú§')
        print("----------------------")
        print('Endere√ßo: Rua Dois,270')
        print('CNPJ: 0.056.589.412-0001-58')
        print('Telefone: 31 3459 - 7515')
        print("----------------------")
        print()
        print("\nMenu - Data Atual: {}".format(data_atual))
        print("1. Inserir dados do ve√≠culo")
        print("2. Mostrar todos os ve√≠culos cadastrados")
        print("3. Calcular consumo")
        print("4. Troca de pe√ßas")
        print("9. Sair")
        print("======================")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            carro = infocarro()
            carros.append(carro)
        elif opcao == "2":
            exibir_todos_carros(carros)
        elif opcao == "3":
            litrosA, valorA = abastecimento()
            for carro in carros:
                km_rodados = carro['Quilometragem final'] - carro['Quilometragem inicial']
                mediaV = calcular_media(km_rodados, litrosA)
                resumo(carro, km_rodados, litrosA, valorA, mediaV)
        elif opcao == "4":
            if carros:
                for carro in carros:
                    km_rodados = carro['Quilometragem final'] - carro['Quilometragem inicial']
                    troca_pecas(km_rodados)
            else:
                print("N√£o h√° ve√≠culos registrados.")
        elif opcao == "9":
            print("Saindo...")
            break
        else:
            print("Op√ß√£o inv√°lida")

if __name__ == "__main__":
    main()